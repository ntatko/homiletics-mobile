// import 'dart:async';

// import 'package:homiletics/classes/lecture_note.dart';
// import 'package:path/path.dart';
// import 'package:sqflite/sqflite.dart';

// final Future<Database> database = getDatabasesPath().then((String path) {
//   return openDatabase(
//     join(path, 'lectures.db'),
//     onCreate: (db, version) {
//       return db.execute('''
//             CREATE TABLE lectures (
//               id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
//               note TEXT,
//               passage TEXT
//             )
//             ''');
//     },
//     version: 1,
//   );
// });

// Future<List<LectureNote>> getApplications() async {
//   final Database db = await database;

//   final List<Map<String, dynamic>> maps = await db.query('lectures');

//   if (maps.isEmpty) {
//     return [];
//   }
//   return List.generate(
//       maps.length, (index) => LectureNote.fromJson(maps[index]));
// }

// Future<void> resetLectureNoteTable() async {
//   final Database db = await database;
//   await db.execute("DROP TABLE IF EXISTS lectures ");
//   await db.execute('''
//             CREATE TABLE applications (
//               id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
//               note TEXT,
//               passage TEXT
//             )
//             ''');
// }

// Future<int> insertApplication(LectureNote note) async {
//   final Database db = await database;

//   return await db.insert('lectures', note.toJson(),
//       conflictAlgorithm: ConflictAlgorithm.replace);
// }

// Future<void> updateApplication(LectureNote note) async {
//   final Database db = await database;

//   await db.update('lectures', note.toJson()..remove('id'),
//       where: 'id = ?', whereArgs: [note.id]);
// }
